{"name":"Tiny-lisp","tagline":"So tiny you wouldn't call it lisp anyway... srsly, it's sexprs + lambda + define + cond.","body":"# f03lipe/tiny-lisp\r\n\r\nA very **very tiny** **EXCRUCIATINGLY SMALL** (OK... maybe not THAT small: ~75 lines) interpreter for a minimal **lisp dialect**.\r\n\r\n![](http://i.imgur.com/EgtTvTg.jpg)\r\n\r\nThe fork won't hurt ya! Feel free to send a pull request.\r\n\r\n\r\n## Usage\r\n\r\n#### To play with this, extend the primitive functions by editing `libs.py`.\r\n\r\n## What is this for?\r\nNothing, obviously.\r\n\r\n## License\r\nMIT License.\r\n\r\n## What is supported\r\n\r\n### Nested s-expressions: \r\n\r\n```lisp\r\n>> (+ (* (/ 3 4) 100) 45)\r\n120\r\n```\r\n### Anon functions: `lambda` or `λ`\r\n```lisp\r\n>> ((λ (x y) (+ x y)) 3 4)\r\n7\r\n>> ((lambda m m) 0)\r\n0\r\n```\r\n### Conditions: `cond`\r\n```lisp\r\n>> ((λ (x)\r\n       (cond  ((% x 2) 'odd)\r\n              (else 'even)))\r\n    4)\r\n'even\r\n```\r\n### Literals: `'`\r\n```lisp\r\n>> (list 'one '2 3)\r\n(\"a\", \"2\", 3)\r\n```\r\n### Strings: doubles-quotes only\r\n```lisp\r\n>> (list \"a \"3)\r\n(\"a\", 3)\r\n```\r\n### Assigning: `define`s at the beggining of any block (evaluating to last element)\r\n```lisp\r\n>> (+ ((define a 3) (* 10 a)) 5)\r\n35\r\n```\r\n### To define procedures, use `lambda`\r\n```lisp\r\n>> ((define pow\r\n            (lambda (x n)\r\n                    (cond ((= n 1) x)\r\n                          (else (* x (pow x (- n 1))))\r\n                    )))\r\n    (pow 2 4))\r\n16.0\r\n```\r\n\r\n## Wanna Help?\r\n\r\nYou can help by extending the libs.py to support more functions. Or optimize the interpreter.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}